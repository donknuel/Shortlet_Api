name: Provision, Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}        # Your GCP Project ID stored in GitHub Secrets
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}     # Region of the Google Artifact Registry stored in GitHub Secrets
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}       # Name of your GKE cluster stored in GitHub Secrets
  GKE_ZONE: ${{ secrets.GKE_ZONE }}             # Zone of your GKE cluster stored in GitHub Secrets
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }} # Name of your Kubernetes Deployment stored in GitHub Secrets
  REPOSITORY: ${{ secrets.REPOSITORY }}         # Artifact Registry Docker repository name stored in GitHub Secrets
  IMAGE: timeapi                                # Name of your Docker image (constant or customizable)
  GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # GCP credentials stored in GitHub Secrets

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: production

    
    permissions:
      contents: 'read'
      id-token: 'write'
      
    steps:
      #chechout the repo
      - name: checkout code
        uses: actions/checkout@v4

      #set up terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
  
    
      # Authentication via credentials JSON
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      # Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Plan Terraform changes
      - name: Terraform Plan
        run: terraform plan

      # Apply Terraform changes
      - name: Terraform Apply
        run: terraform apply -auto-approve
    


  build:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    
      #chechout the repo
      - name: checkout code
        uses: actions/checkout@v4    
        
      # Step 1: Build the Docker image
      - name: Build Docker image
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Step 2: Push the Docker image to Google Artifact Registry
      - name: Publish Docker image
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Step 3: Set up Kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Step 4: Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          # Replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide

      # Step 5: Verify that the API is accessible
      - name: Verify API Endpoint
        run: |
          # Function to wait for the external IP
          wait_for_ip() {
            local service_name=$1
            local timeout=$2
            local interval=5
            local elapsed=0

            while [ $elapsed -lt $timeout ]; do
              EXTERNAL_IP=$(kubectl get svc $service_name -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -n "$EXTERNAL_IP" ]; then
                echo "Service External IP: $EXTERNAL_IP"
                return 0
              fi
              echo "Waiting for external IP... (elapsed: ${elapsed}s)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done

            echo "Error: Timed out waiting for external IP after ${timeout}s."
            return 1
          }

          # Set timeout duration (in seconds)
          TIMEOUT=300

          # Wait for the external IP with a timeout
          if ! wait_for_ip "$DEPLOYMENT_NAME" $TIMEOUT; then
            exit 1
          fi

          # Verify the API response
          RESPONSE=$(curl -s --fail "http://$EXTERNAL_IP/")
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from API."
            exit 1
          fi

          echo "API Response: $RESPONSE"
